"""
Django settings for ssn project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

from decouple import Csv, config

# Importar configuración de logging
from .logging_config import get_logging_config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Directorio apps personalizado
APPS_DIR = BASE_DIR / "apps"

# Añadir APPS_DIR al PYTHONPATH para importar fácilmente las apps
sys.path.insert(0, str(APPS_DIR))

# Directorio para archivos estáticos y media
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"
# Directorio para archivos estáticos
STATIC_ROOT = BASE_DIR / "static"
STATIC_URL = "/static/"

# Directorio para logs
LOGS_DIR = BASE_DIR / "logs"
Path(LOGS_DIR).mkdir(parents=True, exist_ok=True)

# Verificar si estamos en entorno de construcción del Dockerfile
IN_DOCKER_BUILD = os.environ.get("SECRET_KEY") == "dummy"


# Función auxiliar para manejar configuraciones
def get_build_config(key, default=None, build_value=None, cast=None):
    """
    Obtiene un valor de configuración, con manejo especial para entorno de construcción.
    """
    if IN_DOCKER_BUILD and build_value is not None:
        if cast is not None and build_value is not None:
            return cast(build_value)
        return build_value
    if cast is not None:
        return config(key, default=default, cast=cast)
    return config(key, default=default)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_build_config("SECRET_KEY", build_value="dummy_key_for_build")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_build_config("DEBUG", default=False, build_value=True, cast=bool)

# SECURITY WARNING: define the correct hosts in production!
# https://docs.djangoproject.com/en/5.1/ref/settings/#allowed-hosts
# Configuración base de hosts permitidos
base_hosts = get_build_config(
    "ALLOWED_HOSTS", default="", build_value="localhost,127.0.0.1", cast=Csv()
)

# Añadir nombres de servicios Docker y rango de IPs común
ALLOWED_HOSTS = list(base_hosts) + [
    # Nombres de servicios
    "web",
    "nginx",
    "db",
    "inversiones.nobleseguros.com",
]

# Añadir IPs de Docker más comunes (rango 172.16-31.0.1-5)
for i in range(16, 32):
    for j in range(1, 6):
        ALLOWED_HOSTS.append(f"172.{i}.0.{j}")

# Añadir el rango de IPs 192.168.x.x
for i in range(0, 256):
    for j in range(0, 6):  # Añadir IPs .0 a .5
        ALLOWED_HOSTS.append(f"192.168.{i}.{j}")

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "operaciones",
    "theme",
    "csp",  # Content Security Policy
    "tailwind",
    "django_browser_reload",
    "rest_framework",
    "ssn_client",
]

TAILWIND_APP_NAME = "theme"

INTERNAL_IPS = [
    "127.0.0.1",
]

# NPM_BIN_PATH = "/usr/bin/npm"

NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database
if IN_DOCKER_BUILD:
    # Configuración para construcción de Docker
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # Configuración normal para ejecución
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("POSTGRES_DB"),  # Debe ser 'ssn_db', no 'ssn_user'
            "USER": config("POSTGRES_USER"),
            "PASSWORD": config("POSTGRES_PASSWORD"),
            "HOST": config("POSTGRES_HOST", default="db"),
            "PORT": config("POSTGRES_PORT", default="5432"),
            "OPTIONS": {
                "options": "-c search_path=public",
                "client_encoding": "UTF8",
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "es-es"

TIME_ZONE = "America/Argentina/Buenos_Aires"

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# SSN Client Configuration
SSN_API_USERNAME = get_build_config("SSN_API_USERNAME", build_value="build_user")
SSN_API_PASSWORD = get_build_config("SSN_API_PASSWORD", build_value="build_pass")
SSN_API_CIA = get_build_config("SSN_API_CIA", build_value="build_cia")
SSN_API_BASE_URL = get_build_config(
    "SSN_API_BASE_URL", build_value="https://example.com"
)
SSN_API_MAX_RETRIES = get_build_config(
    "SSN_API_MAX_RETRIES", default=3, build_value=3, cast=int
)
SSN_API_RETRY_DELAY = get_build_config(
    "SSN_API_RETRY_DELAY", default=5, build_value=5, cast=int
)

# Tiempo máximo en minutos para conservar archivos de previsualización
PREVIEW_MAX_AGE_MINUTES = get_build_config(
    "PREVIEW_MAX_AGE_MINUTES",
    default=5,
    build_value=5,
    cast=int,
)

# Configuración de logging
# Lista de todas las aplicaciones para las que se quiere configurar logging
LOGGING_APPS = [
    # Listar todas las apps que requieren logging específico
    "operaciones",
    "ssn_client",
]

# Aplicar configuración de logging
LOGGING = get_logging_config(debug_mode=DEBUG, logs_dir=LOGS_DIR, apps=LOGGING_APPS)

# Configuraciones de seguridad
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"
CSRF_COOKIE_SECURE = True  # True en producción
SESSION_COOKIE_SECURE = True  # True en producción

# Configuración de cookies
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

# Duración de sesión
SESSION_COOKIE_AGE = 86400  # 24 horas en segundos
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Configuración CSP actualizada para resolver los errores
CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "default-src": ("'self'",),
        "style-src": (
            "'self'",
            "fonts.googleapis.com",
            "cdnjs.cloudflare.com",
            "'unsafe-inline'",
        ),
        "script-src": ("'self'", "'unsafe-inline'", "'unsafe-eval'"),
        "font-src": ("'self'", "fonts.gstatic.com", "cdnjs.cloudflare.com"),
        "img-src": (
            "'self'",
            "data:",
            "https:",
            "http:",
            "*",
        ),  # Permitir imágenes de cualquier origen
        "connect-src": ("'self'",),
    }
}

# Header de Cross-Origin-Opener-Policy
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin"

# Asegurar redirección a HTTPS en producción
SECURE_SSL_REDIRECT = False
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Configuraciones HSTS
SECURE_HSTS_SECONDS = 31536000  # 1 año
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Rate limiting
REST_FRAMEWORK = {
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "100/day", "user": "1000/day"},
}

# Configuración de archivos permitidos
ALLOWED_UPLOAD_EXTENSIONS = [".pdf", ".png", ".jpg", ".jpeg"]
MAX_UPLOAD_SIZE = 5242880  # 5MB en bytes

# Correo de soporte
SUPPORT_EMAIL = get_build_config(
    "SUPPORT_EMAIL", default="soporte@compania.com", build_value="example@example.com"
)
