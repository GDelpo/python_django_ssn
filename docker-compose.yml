services:
  web:
    build:
      context: .
      args:
        UID: ${LOCAL_UID:-1000}
        GID: ${LOCAL_GID:-1000}
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./ssn/media:/app/ssn/media
      - ./ssn/logs:/app/ssn/logs
      - static_volume:/app/static
    depends_on:
      - db
    environment:
      - PYTHONPATH=/app/ssn
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      retries: 5
    networks:
      - app_network

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    env_file: .env
    restart: unless-stopped
    ports:
      - "${NGINX_HOST}:${NGINX_PORT_HTTP}:${NGINX_PORT_HTTP}"
      - "${NGINX_HOST}:${NGINX_PORT_HTTPS}:${NGINX_PORT_HTTPS}"
    volumes:
      - static_volume:/app/static:ro
      - ./ssn/media:/app/media:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - web
    networks:
      - app_network

  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app_network

volumes:
  postgres_data:
  static_volume:
  certbot_certs:  # Volumen para los certificados
  certbot_www:    # Volumen para el desafío de verificación

networks:
  app_network:
    driver: bridge